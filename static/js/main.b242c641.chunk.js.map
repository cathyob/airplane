{"version":3,"sources":["logic/Network.js","models/PlaneClass.js","components/Seat.js","components/SectionHeader.js","components/Section.js","App.js","index.js"],"names":["URL","logic_Network","Network","Object","classCallCheck","this","network","axios","create","baseURL","_this","Promise","resolve","reject","get","then","response","data","catch","error","PlaneClass","seats","seat","push","sort","seat1","seat2","row","localeCompare","rowNumber","firstSeat","seatsInRow","i","length","nextSeat","firstSeatIndex","rowOfSeats","findAisles","startingLetterCode","charCodeAt","distance","rowWithAisles","advanced","currChar","String","fromCharCode","getHighestRow","startingSeat","class","Seat","styled","div","_templateObject","SeatItem","props","possibleConstructorReturn","getPrototypeOf","call","selectSeat","bind","assertThisInitialized","onSelect","occupied","classNames","rowNum","selectedSeat","react_default","a","createElement","className","join","onClick","Component","SeatsHeader","SectionHeader_templateObject","SectionHeader","seatHeaders","key","createHeaders","SectionOfSeats","Section_templateObject","rowWidth","Section","seatsToDraw","z","getRowCount","seatsWithAisles","getSeatsForRow","Seat_SeatItem","getClassLevel","getRowWidth","SectionHeader_SectionHeader","getSeatsToDraw","Content","App_templateObject","App","state","classLevels","updateSelectedSeat","_this2","getSeats","sortSeats","console","log","setState","seatArray","sortedClasses","seatClasses","addSeat","currentClass","b","sections","Section_Section","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b242c641.chunk.js","sourcesContent":["// needed to make a webcall\n// axios was library of choice, could have used fetch or other\nimport axios from 'axios';\n\nconst URL = 'https://raw.githubusercontent.com/cathyob/airplane/'; // url base endpoint\n\nclass Network {\n  constructor() {\n    this.network = axios.create({\n      baseURL: URL,\n    });\n  }\n\n  \n  getSeats() {\n    return new Promise((resolve, reject) => {\n      // axios takes the add'l string and appends to URL for us\n      this.network.get('master/src/logic/data.json')\n        .then((response) => {\n          resolve(response.data);\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    });\n  }\n}\n\n// we export network this way so it is always the same\n// vs export default Network;\n// we'd have to instantiate in every single component it is imported to\nexport default new Network();\n","export default class PlaneClass {\n    constructor() {\n        this.seats = []; // to put all seats in a certain section into\n    }\n\n    addSeat(seat) {\n        this.seats.push(seat);\n    }\n\n    // sort seats that are out of order by row then seat\n    sortSeats() {\n        this.seats.sort((seat1, seat2) => {\n            if(seat1.row !== seat2.row) {\n                return seat1.row - seat2.row\n            } else {\n                return seat1.seat.localeCompare(seat2.seat, \"en-US\"); // comparing in english always\n                // e.g. compare seat1.c to seat2.a, a comes before c in english\n            }\n        })\n    }\n\n    // given a row number of 1 or higher, not 0\n    getSeatsForRow(rowNumber) {\n        const firstSeat = this.seats[0];\n\n        // assuming there is at least 1 seat per row \n        let seatsInRow = 1;\n\n        // if a row has 2 or more seats\n        // need to compare to seats ahead until row number changes\n        // then we know that is how wide the row is, assuming all\n        // rows in the section have the same number of seats\n        for(let i = 1; i < this.seats.length; i += 1) {\n            // set the next seat starting at the 2nd seat in a row\n            const nextSeat = this.seats[i];\n\n            // if we find the next row's first seat we know i is the\n            // number of seats in the row\n            if(firstSeat.row !== nextSeat.row) {\n                seatsInRow = i;\n                break // once we see it change we can stop the loop since all rows are the same\n            }\n        }\n\n        //  used to calculate what row is asked for, subtracting 1 to find the index\n        // if we know the row number we know the first seat\n        // since e.g. row 4 - 1 = 3 * 4 = 12, the first seat in row 4 is at index 12\n        const firstSeatIndex = (rowNumber - 1) * seatsInRow;\n\n        let rowOfSeats = [];\n\n        // starting at the first seat of the row given\n        // to the end of the row knowing how many seats per row\n        // so we can draw the full section\n        for(let i = firstSeatIndex; i < firstSeatIndex + seatsInRow; i += 1) {\n            const seat = this.seats[i];\n            rowOfSeats.push(seat);\n        }\n        \n        // so that we can use this to find the aisles\n        // and keeping the row numbers true to the full plane, not by section\n        return this.findAisles(rowOfSeats, firstSeat.row+(rowNumber - 1));\n    }\n\n    findAisles(seatsInRow, rowNumber) {\n        // representing the first seat's letter as a number so that\n        // we can calc how many seats + aisles are in a row\n        const startingLetterCode = 'A'.charCodeAt(0);\n\n        // based on assigment details assume last seat in array is\n        // the same in all rows in that section\n        // and will use to calc seats + aisles\n        const lastLetterCode = seatsInRow[seatsInRow.length - 1].seat.charCodeAt(0);\n\n        // using the last letter's code to subtract the starting letter's\n        // code to calc seats + aisles in the row\n        const distance = lastLetterCode - startingLetterCode;\n\n        const rowWithAisles = [];\n\n        // using advanced so we don't skip after we find a missing seat\n        let advanced = 0;\n\n        for(let i = 0; i <= distance; i++) {\n            // convert number to a character/string starting \n            // at first character i.e. A\n            const currChar = String.fromCharCode(startingLetterCode + i); \n        \n            // if the current seat doesn't match the character's code\n            // we know an aisle exists\n            if(seatsInRow[advanced].seat !== currChar) {\n                // so we add the aisle as an object with a row number\n                rowWithAisles.push({row: rowNumber});\n            } else {\n                // if the seat matches the character's code we add to the\n                // array confirming the match then move forward to compare the next\n                rowWithAisles.push(seatsInRow[advanced]);\n                advanced += 1;\n            }\n        }\n        return rowWithAisles;\n    }\n\n    // based on assignment details, assuming rows in one class are\n    // symmetrical & the same length\n    getHighestRow() {\n        return this.seats[this.seats.length - 1].row;\n    }\n\n    // for drawing seating chart count number of rows in the class\n    // add one since starting at row 1\n    getRowCount() {\n        return (this.getHighestRow() - this.seats[0].row) + 1;\n    }\n\n    // using to determine how many seats + aisles are in a row\n    // to feed into the section component to set the widths of each section\n    getRowWidth() {\n        const startingSeat = 'A'.charCodeAt(0) - 1;\n        const highestSeat = this.seats[this.seats.length - 1].seat.charCodeAt(0);\n\n        return highestSeat - startingSeat;\n    }\n\n    // grab the class level to use as section title / className / whatever may be needed\n    getClassLevel() {\n        return this.seats[0].class;\n    }\n}","import React, { Component } from 'react';\n\nimport styled from 'styled-components';\n\nconst Seat = styled.div`\n    background: none;\n    border: 2px solid DarkGray;\n    box-sizing: border-box;\n    border-radius: 3px;\n    height: 20px;\n    margin: 3px;\n    transition: .3s;\n    width: 20px;\n    &.Available {\n        background: royalblue;\n        cursor: pointer;\n        &:hover {\n            background: pink;\n        }\n    }\n    &.Selected, &.Selected:hover {\n        background: magenta;\n        cursor: default;\n    }\n    &.Aisle {\n        background: none;\n        border: 0;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        margin: 3px 3px;\n        padding: 0;\n    }\n`;\n\nexport default class SeatItem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.selectSeat = this.selectSeat.bind(this);\n  }\n\n  selectSeat() {\n      if(this.props.onSelect && !this.props.data.occupied) {\n          this.props.onSelect(this.props.data.row, this.props.data.seat);\n      }\n  }\n\n  render() {\n      const classNames = [];\n      let rowNum = null;\n\n      if (!this.props.data.seat) { // if it doesn't have a seat letter then we know it is an aisle\n          classNames.push(\"Aisle\");\n          rowNum = this.props.data.row;\n      } else if(!this.props.data.occupied) { // if it isn't marked as occupied: true set className to available\n          classNames.push(\"Available\");\n      }\n\n      // if we were given a selected seat and the row num and seat letter match add className Selected\n      if(this.props.selectedSeat && \n        this.props.selectedSeat.row === this.props.data.row && \n        this.props.selectedSeat.seat === this.props.data.seat) {\n             classNames.push(\"Selected\");\n      }\n      \n    return (\n      // need to convert from array to string with spaces in-between\n      <Seat className={classNames.join(\" \")} onClick={this.selectSeat}>\n        {rowNum !== null ? rowNum : null}\n      </Seat>\n    );\n  }\n}","import React, { Component } from 'react';\n\nimport styled from 'styled-components';\n\n// for the seat letter labels at the top of each section\nconst SeatsHeader = styled.div`\n    background: none;\n    border: 0;\n    box-sizing: border-box;\n    border-radius: 3px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 20px;\n    margin: 3px 3px;\n    padding: 0;\n    transition: .3s;\n    width: 20px;\n`;\n\nexport default class SectionHeader extends Component {\n\n    createHeaders() {\n        const seatHeaders = [];\n        for(let i = 0; i < this.props.data.length; i += 1) {\n            seatHeaders.push(\n                <SeatsHeader key={i}>{this.props.data[i].seat}</SeatsHeader>\n            )\n        }\n\n        return seatHeaders;\n    }\n\n    render() {\n        return this.createHeaders();\n    }\n}","import React, { Component } from 'react';\n\nimport styled from 'styled-components';\n\nimport Seat from '../components/Seat';\nimport SectionHeader from '../components/SectionHeader';\n\nconst SectionOfSeats = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    margin: 32px auto;\n    width: calc(27px * ${props => props.rowWidth});\n    h3 {\n        flex: 100%;\n        text-align: center;\n    }\n`;\n\nexport default class Section extends Component {\n\n    getSeatsToDraw() {\n        let seatsToDraw = [];\n\n        for(let z = 0; z < this.props.data.getRowCount(); z += 1) {\n            // need to start z at 1 since an index of 0 is row 1\n            const seatsWithAisles = this.props.data.getSeatsForRow(z + 1);\n\n            for(let i = 0; i < seatsWithAisles.length; i += 1) {\n                /* key: since there are multiple sections need to ensure each key is unique by section and seat */\n                seatsToDraw.push(\n                    <Seat \n                        key={z + \" \" + i} \n                        data={seatsWithAisles[i]}\n                        onSelect={this.props.selectSeat}\n                        selectedSeat={this.props.selectedSeat}\n                    />\n                )\n            }\n        }\n\n        return seatsToDraw;\n    }\n\n    render() {\n        return (\n        <SectionOfSeats \n            className={this.props.data.getClassLevel()} \n            rowWidth={this.props.data.getRowWidth()}>\n            <h3>{this.props.data.getClassLevel()}</h3>\n            <SectionHeader data={this.props.data.getSeatsForRow(1)} />\n            {this.getSeatsToDraw()}\n        </SectionOfSeats>\n        );\n    }\n}","import React, { Component } from 'react';\n\nimport styled from 'styled-components';\n\nimport Network from './logic/Network';\nimport PlaneClass from './models/PlaneClass';\n\nimport Section from './components/Section';\n\nconst Content = styled.div`\n`\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      classLevels: [], // array of all class levels found, e.g. 3 here, could have 4th like Economy Plus\n      selectedSeat: null, // set on whole page since only 1 selectedSeat per page\n    }\n\n    this.updateSelectedSeat = this.updateSelectedSeat.bind(this); // lets us set the state when calling the function\n  }\n\n  // promise to get the json data\n  componentDidMount() {\n    Network.getSeats()\n    .then((response) => {\n      this.sortSeats(response); // if data given, call sortSeats function\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n  }\n\n  // called when an available seat is selected to redraw the new/old selected seats\n  updateSelectedSeat(row, seat) {\n    this.setState({\n      selectedSeat: {\n        row,\n        seat,\n      }\n    })\n  }\n\n  // need to sort the list of seats\n  sortSeats(seatArray) {\n    const sortedClasses = []; // end result with classes in order from front to back\n    const seatClasses = {}; // list of classes starts in whatever order seats are provided, not necessarily front to back\n\n    // first it sorts by the class e.g. first, business, economy\n    for(let i = 0; i < seatArray.length; i += 1) {\n      const seat = seatArray[i];\n\n      // if we haven't seen this seat's class yet create an object/map\n      // to hold seats for this section\n      // so there will be x number of arrays within the seat array,\n      // depending on how many class there are\n      if(!seatClasses[seat.class]) {\n        seatClasses[seat.class] = new PlaneClass();\n      }\n\n      // add this seat to the new or existing PlaneClass array\n      const existingSeats = seatClasses[seat.class];\n      existingSeats.addSeat(seat);\n    }\n\n    // key is the class name that was created for each unique class\n    // e.g. economy, first, business\n    // found in seatClasses\n    for(let key in seatClasses) {\n      const currentClass = seatClasses[key];\n      currentClass.sortSeats(); // sort class section based on row and seat letter\n      sortedClasses.push(currentClass); // then add when finished to list of classes\n    } \n    // then sort the different classes based on their highest row to\n    // put them in proper front -> back order\n    sortedClasses.sort((a,b) => {\n      return a.getHighestRow() - b.getHighestRow();\n    })\n\n    // now that the sort is over we can draw the screen\n    this.setState({\n      classLevels: sortedClasses,\n    })\n  }\n\n  // accessing the sorted classes and drawing by section\n  render() {\n    let sections = [];\n    for(let i = 0; i < this.state.classLevels.length; i += 1) {\n      sections.push(\n        <Section \n          key={i} \n          data={this.state.classLevels[i]}\n          selectSeat={this.updateSelectedSeat}\n          selectedSeat={this.state.selectedSeat}\n        />\n      );\n    }\n\n    return (\n      <Content className=\"App\">\n        {sections}\n      </Content>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}